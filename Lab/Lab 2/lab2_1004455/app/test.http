# Tests for checkoff requirements
# Send requests in order as written in file. If you get 'please login to acces this feature', use the login command

# I used the same docker setup given in the lab with modified libraries.
# Please run docker-compose build and then docker-compose up


# ================= 1. GET requests=====================
# Log in and get with no params
PUT http://127.0.0.1:8000/login?id=admin&pwd=ihavegodpowers HTTP/1.1
###
GET http://127.0.0.1:8000/students HTTP/1.1
### 

# get with params. 
# sortBy can take params {id, name}
# count limits the number of entries returned {any int}
# offset skips the first n entries {any int}
GET http://127.0.0.1:8000/students?sortBy=id HTTP/1.1
###
GET http://127.0.0.1:8000/students?sortBy=id&count=2 HTTP/1.1
###
GET http://127.0.0.1:8000/students?sortBy=id&count=2&offset=1 HTTP/1.1
###
# get specifc student by id
GET http://127.0.0.1:8000/students/1004803 HTTP/1.1
###

# ====================== 2. POST requests ===============================
# reset database to default state. to be used only if below step does not return null.
DELETE http://127.0.0.1:8000/reset?key=cleardb HTTP/1.1
###
# check resource doesn't exist. should return null. if not null, reset database using command above
GET http://127.0.0.1:8000/students/1004231 HTTP/1.1
###
# create new student in registry
# required fields are {'name', 'id', 'password'}
# optional fields are {'assignment', 'gpa'}
# id must be in the format 100xxxx (7 digits)
POST http://127.0.0.1:8000/newstudent HTTP/1.1
Content-Type: application/json

{
    "name": "Daniel",
    "id": "1004231",
    "password": "pineapple"
}
###
# check resource was added to database 
GET http://127.0.0.1:8000/students/1004231 HTTP/1.1
###
# This route is idempotent. 
# Adding new student with id that is already existing in the db will not overwrite data.
# The request below attempts to add new student we just created with slightly different values (but same id since the registry stores id as the key)
# This should return Error 422 Unprocesable Entity
POST http://127.0.0.1:8000/newstudent HTTP/1.1
Content-Type: application/json
{
    "name": "Dan",
    "id": "1004231",
    "password": "pineapple",
    "assignment": "lab1"
}
###
# check that registry was not updated, proving route is indempotent
GET http://127.0.0.1:8000/students/1004231 HTTP/1.1
###


# ======================== 3. DELETE requests =================================

# The following test is to delete a specific student from the database
# first, check student exists
GET http://127.0.0.1:8000/students/1004803 HTTP/1.1
###
# delete the student by specifying student id
DELETE http://127.0.0.1:8000/delstudent?id=1004803 HTTP/1.1
###
# check if student still exists in registry. Should return null.
GET http://127.0.0.1:8000/students/1004803 HTTP/1.1
###
# reset database to default state
DELETE http://127.0.0.1:8000/reset?key=cleardb HTTP/1.1
###
# The /delstudent route is also idempotent since you can't delete the same student again. Following delete requests for the specific student will return null.


# ============================== 3. PUT requests =====================================
# To update a student's password
# 1. Check current password for Alice (password should be apple)
GET http://127.0.0.1:8000/students/1004803 HTTP/1.1
###
# 2. change her password to applesauce
PUT http://127.0.0.1:8000/updatepassword?id=1004803&npass=applesauce HTTP/1.1
###
# 3. check that change was successful
GET http://127.0.0.1:8000/students/1004803 HTTP/1.1
# Give students new assignments
# 1. The following request assigns 'hw2' to Alice
PUT http://127.0.0.1:8000/assignnew?id=1004803&hw=hw2 HTTP/1.1
###
# 2. Check that assignment update was successful
GET http://127.0.0.1:8000/students/1004803 HTTP/1.1
###

# PUT requests are not idempotent. Sending a new request will modify existing entries in the database
# login and logout functions are also PUT requests which update the login variable in the script.\


# ======================= 4. Challenge Requests ============================
# The following uploads an image file to the database and downloads it to local directory
# To upload file, Required arguments: {id}, Optional arguments: {filepath} 
# By default, the photo 'app/sample.jpg' will be sent
# Photo sent as form-data with header
PUT http://127.0.0.1:8000/setphoto?id=1004803 HTTP/1.1
Accept: image/jpeg
Content-Type: multipart/form-data
###
# Download the file from database
# downloads to /app/{id}photo.jpg
GET http://127.0.0.1:8000/getphoto?id=1004803 HTTP/1.1
Accept: image/jpeg










#============================= List of all tests ===============================


# invalid login
PUT http://127.0.0.1:8000/login?id=bob&pwd=idonthavegodpowers HTTP/1.1

###

# valid login
PUT http://127.0.0.1:8000/login?id=admin&pwd=ihavegodpowers HTTP/1.1
###

# get all students in registry
GET http://127.0.0.1:8000/students HTTP/1.1

###

# get specifc student by id
GET http://127.0.0.1:8000/students/1004803 HTTP/1.1

###

# get students sorted by id
GET http://127.0.0.1:8000/students?sortBy=id HTTP/1.1

###

# get students sorted by name
GET http://127.0.0.1:8000/students?sortBy=name HTTP/1.1

###

# get top 2 students sorted by id
GET http://127.0.0.1:8000/students?sortBy=id&count=2 HTTP/1.1

###

# get first 2 students sorted by id, then skip 1st student in list
GET http://127.0.0.1:8000/students?sortBy=id&count=2&offset=1 HTTP/1.1

###

# add new student to registry
POST http://127.0.0.1:8000/newstudent HTTP/1.1
Content-Type: application/json

{
    "name": "Daniel",
    "id": "1004231",
    "password": "pineapple"
}

###

# delete student by id
DELETE http://127.0.0.1:8000/delstudent?id=1004231 HTTP/1.1

###

# update a student's password
PUT http://127.0.0.1:8000/updatepassword?id=1004803&npass=applesauce HTTP/1.1

###

# give a student a new assignment
PUT http://127.0.0.1:8000/assignnew?id=1004803&hw=hw2 HTTP/1.1

###

# reset database to default state
DELETE http://127.0.0.1:8000/reset?key=cleardb HTTP/1.1

###

# Set profile photo for a student account
PUT http://127.0.0.1:8000/setphoto?id=1004803 HTTP/1.1
Accept: image/jpeg
Content-Type: multipart/form-data

###

# GET profile photo for a student account
GET http://127.0.0.1:8000/getphoto?id=1004803 HTTP/1.1
Accept: image/jpeg

###

# logout of registry system
PUT http://127.0.0.1:8000/logout HTTP/1.1
